var ScrollAnimate=()=>{const e=e=>!(e.down||e.up),t=(e,t,n="")=>{e.className=`${t} ${n}`.trim()};return{isInView:({top:e,bottom:t},n)=>e+n<(()=>document.documentElement.clientHeight)()&&t-n>0,run(n,{value:o,modifiers:i},{offset:r,isUpwards:s,previousClassName:a=""}){if((e=>!e.in&&e.out)(o))return void console.warn("animate-on-scroll","'out' parameter can't be used alone. 'in' required");let l=n.getBoundingClientRect();if(!this.isInView(l,r)){const r=o.out||"";return i.repeat&&(e(o)||r)?t(n,a,r):void 0}if(e(o)){const e=o.in||o;return t(n,a,e)}if(i.repeat||(e=>e.down&&e.up)(o)||!((e="",t="")=>e.trim()!==t.trim())(n.className,a)){const e=s?o.up:o.down;return t(n,a,e)}return(({params:e,isUpwards:t,repeat:n})=>n&&(t&&e.down||!t&&e.up))({params:o,isUpwards:s,...i})?t(n,a):void 0}}},index={ScrollAnimate:ScrollAnimate,install(e){e.directive("animate-onscroll",{inserted(e,t){const n=ScrollAnimate(Date.now()),o=e.className,i=parseInt(e.dataset.animateOnscrollOffset||0);let r=window.pageYOffset;window.addEventListener("scroll",function(){let s=window.pageYOffset||document.documentElement.scrollTop;const a=s<r;n.run(e,t,{offset:i,isUpwards:a,previousClassName:o}),r=s<=0?0:s},!1)}})}};export default index;
